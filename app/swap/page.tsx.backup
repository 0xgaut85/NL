"use client";

import { motion } from "framer-motion";
import Image from "next/image";
import Link from "next/link";
import { useState, useEffect } from 'react';
import { useAccount, useConnect, useDisconnect, useBalance, useChainId } from 'wagmi';
import { formatUnits } from 'viem';
import WalletModal from '@/components/WalletModal';
import { Connection, PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js';

// Token price interface
interface TokenPrice {
  usd: number;
  usd_24h_change: number;
}

interface TokenPrices {
  [key: string]: TokenPrice;
}

export default function SwapPage() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [fromToken, setFromToken] = useState("ETH");
  const [toToken, setToToken] = useState("USDT");
  const [fromAmount, setFromAmount] = useState("");
  const [toAmount, setToAmount] = useState("");
  const [slippage, setSlippage] = useState("0.5");
  const [showWalletModal, setShowWalletModal] = useState(false);
  const [tokenPrices, setTokenPrices] = useState<TokenPrices>({});
  const [pricesLoading, setPricesLoading] = useState(true);
  const [solanaAddress, setSolanaAddress] = useState<string | null>(null);
  const [solanaBalance, setSolanaBalance] = useState<string>("0.0000");
  const [sendToDifferentWallet, setSendToDifferentWallet] = useState(false);
  const [recipientAddress, setRecipientAddress] = useState("");
  const [fromChain, setFromChain] = useState("Ethereum");
  const [toChain, setToChain] = useState("Ethereum");

  // Available chains for cross-chain swaps
  const chains = [
    { name: "Ethereum", logo: "/logos/ethereum.jpg" },
    { name: "Arbitrum", logo: "/logos/arbitrum.jpg" },
    { name: "Optimism", logo: "/logos/optimism.jpg" },
    { name: "BSC", logo: "/logos/BSC.jpg" },
    { name: "Avalanche", logo: "/logos/avalanche.jpg" },
    { name: "Solana", logo: "/logos/solana.jpg" },
    { name: "Base", logo: "/logos/base.jpg" },
  ];

  // Wagmi hooks for wallet connection (Ethereum)
  const { address, isConnected } = useAccount();
  const { connect, connectors } = useConnect();
  const { disconnect } = useDisconnect();
  const chainId = useChainId();
  
  // Get ETH balance
  const { data: ethBalance } = useBalance({
    address: address,
  });

  // Check for Phantom wallet (Solana)
  useEffect(() => {
    // Helper to get Phantom provider
    const getPhantom = () => {
      if (typeof window === 'undefined') return null;
      if ((window as any).phantom?.solana?.isPhantom) {
        return (window as any).phantom.solana;
      }
      if ((window as any).solana?.isPhantom) {
        return (window as any).solana;
      }
      return null;
    };

    const fetchSolanaBalance = async (address: string) => {
      try {
        console.log('Getting SOL balance for:', address);
        
        // Try to get balance directly from Phantom first (it already knows the balance!)
        const phantom = getPhantom();
        if (phantom && phantom.publicKey && phantom.publicKey.toString() === address) {
          try {
            // Phantom has a connection object we can use
            if ((phantom as any).connection) {
              const phantomConnection = (phantom as any).connection;
              const balance = await phantomConnection.getBalance(phantom.publicKey);
              const solBalance = (balance / LAMPORTS_PER_SOL).toFixed(4);
              console.log('✅ Got balance directly from Phantom:', solBalance);
              setSolanaBalance(solBalance);
              return;
            }
          } catch (phantomErr) {
            console.log('Could not get balance from Phantom connection, trying RPCs...');
          }
        }
        
        // Fallback: Try public RPCs (but they're rate-limited)
        const mainnetEndpoints = [
          'https://api.mainnet-beta.solana.com',
          'https://rpc.ankr.com/solana',
        ];
        
        for (const endpoint of mainnetEndpoints) {
          try {
            console.log('Trying RPC:', endpoint);
            const connection = new Connection(endpoint, 'confirmed');
            const balanceResponse = await connection.getBalance(new PublicKey(address));
            const solBalance = (balanceResponse / LAMPORTS_PER_SOL).toFixed(4);
            console.log('✅ Got balance from RPC:', solBalance);
            setSolanaBalance(solBalance);
            return;
          } catch (err: any) {
            console.error(`RPC ${endpoint} failed:`, err.message);
            continue;
          }
        }
        
        // All methods failed
        console.error('❌ Could not fetch SOL balance - all RPCs are rate-limited');
        console.error('Your address:', address);
        console.error('Solution: Get a free RPC key from https://www.helius.dev or https://www.alchemy.com');
        setSolanaBalance('-.----');  // Show that we tried but failed
        
      } catch (error) {
        console.error('Error fetching SOL balance:', error);
        setSolanaBalance('0.0000');
      }
    };

    const phantom = getPhantom();
    
    if (phantom) {
      // Listen for Phantom account changes
      phantom.on('accountChanged', async (publicKey: any) => {
        if (publicKey) {
          const address = publicKey.toString();
          setSolanaAddress(address);
          await fetchSolanaBalance(address);
        } else {
          setSolanaAddress(null);
          setSolanaBalance("0.0000");
        }
      });

      // Listen for disconnect
      phantom.on('disconnect', () => {
        setSolanaAddress(null);
        setSolanaBalance("0.0000");
      });

      // Check if already connected on page load
      if (phantom.isConnected && phantom.publicKey) {
        const address = phantom.publicKey.toString();
        console.log('Phantom already connected on page load');
        console.log('Phantom address:', address);
        console.log('Phantom network:', phantom.isPhantom ? 'Solana' : 'Unknown');
        setSolanaAddress(address);
        fetchSolanaBalance(address);
      }

      // Listen for custom connection event from modal
      const handlePhantomConnected = (event: any) => {
        const address = event.detail.publicKey;
        console.log('Phantom connected event received:', address);
        setSolanaAddress(address);
        // Wait a bit for state to update, then fetch balance
        setTimeout(() => {
          fetchSolanaBalance(address);
        }, 500);
      };

      window.addEventListener('phantomConnected', handlePhantomConnected);

      return () => {
        window.removeEventListener('phantomConnected', handlePhantomConnected);
      };
    }
  }, []);

  // Fetch real token prices from CoinGecko API
  useEffect(() => {
    const fetchPrices = async () => {
      try {
        setPricesLoading(true);
        const response = await fetch(
          'https://api.coingecko.com/api/v3/simple/price?ids=ethereum,tether,usd-coin,dai,wrapped-bitcoin,solana&vs_currencies=usd&include_24hr_change=true'
        );
        const data = await response.json();
        
        setTokenPrices({
          ETH: { usd: data.ethereum?.usd || 0, usd_24h_change: data.ethereum?.usd_24h_change || 0 },
          USDT: { usd: data.tether?.usd || 0, usd_24h_change: data.tether?.usd_24h_change || 0 },
          USDC: { usd: data['usd-coin']?.usd || 0, usd_24h_change: data['usd-coin']?.usd_24h_change || 0 },
          DAI: { usd: data.dai?.usd || 0, usd_24h_change: data.dai?.usd_24h_change || 0 },
          WBTC: { usd: data['wrapped-bitcoin']?.usd || 0, usd_24h_change: data['wrapped-bitcoin']?.usd_24h_change || 0 },
          SOL: { usd: data.solana?.usd || 0, usd_24h_change: data.solana?.usd_24h_change || 0 },
          NL: { usd: 1.0, usd_24h_change: 0 }, // Placeholder for NL token
        });
        setPricesLoading(false);
      } catch (error) {
        console.error('Failed to fetch token prices:', error);
        setPricesLoading(false);
      }
    };

    fetchPrices();
    // Refresh prices every 30 seconds
    const interval = setInterval(fetchPrices, 30000);
    return () => clearInterval(interval);
  }, []);

  const handleConnectWallet = () => {
    setShowWalletModal(true);
  };

  const handleDisconnectWallet = () => {
    // Disconnect Ethereum wallets
    if (isConnected) {
      disconnect();
    }
    
    // Disconnect Phantom (Solana)
    if (solanaAddress && (window as any).phantom?.solana) {
      (window as any).phantom.solana.disconnect();
      setSolanaAddress(null);
      setSolanaBalance("0.0000");
    }
  };

  // Format address for display
  const displayAddress = address 
    ? `${address.slice(0, 6)}...${address.slice(-4)}` 
    : solanaAddress 
    ? `${solanaAddress.slice(0, 6)}...${solanaAddress.slice(-4)}`
    : '';

  // Format balance for display
  const displayBalance = ethBalance 
    ? `${parseFloat(formatUnits(ethBalance.value, ethBalance.decimals)).toFixed(4)}`
    : '0.0000';

  // Debug logging
  useEffect(() => {
    if (isConnected && address) {
      console.log('EVM Wallet connected:', address);
      console.log('Chain ID:', chainId);
      console.log('ETH Balance:', ethBalance);
    }
    if (solanaAddress) {
      console.log('Solana Wallet connected:', solanaAddress);
      console.log('SOL Balance:', solanaBalance);
    }
  }, [isConnected, address, chainId, ethBalance, solanaAddress, solanaBalance]);

  // Recalculate exchange when token selection or prices change
  useEffect(() => {
    if (fromAmount && tokenPrices[fromToken] && tokenPrices[toToken]) {
      const fromPrice = tokenPrices[fromToken].usd;
      const toPrice = tokenPrices[toToken].usd;
      const rate = fromPrice / toPrice;
      setToAmount((Number(fromAmount) * rate).toFixed(6));
    }
  }, [fromToken, toToken, tokenPrices]);

  const tokens = [
    { symbol: "ETH", name: "Ethereum", balance: displayBalance, id: "ethereum" },
    { symbol: "SOL", name: "Solana", balance: solanaBalance, id: "solana" },
    { symbol: "USDT", name: "Tether", balance: "0.00", id: "tether" },
    { symbol: "USDC", name: "USD Coin", balance: "0.00", id: "usd-coin" },
    { symbol: "DAI", name: "Dai", balance: "0.00", id: "dai" },
    { symbol: "WBTC", name: "Wrapped Bitcoin", balance: "0.00", id: "wrapped-bitcoin" },
    { symbol: "NL", name: "NoLimit Token", balance: "0.00", id: "nolimit" }
  ];

  // Get token logo from CoinGecko API
  const getTokenLogo = (tokenId: string) => {
    if (tokenId === 'nolimit') return '/logo3.svg'; // Custom logo for NL token
    return `https://assets.coingecko.com/coins/images/small/${
      tokenId === 'ethereum' ? '279/ethereum.png' :
      tokenId === 'solana' ? '4128/solana.png' :
      tokenId === 'tether' ? '325/tether.png' :
      tokenId === 'usd-coin' ? '6319/usd-coin.png' :
      tokenId === 'dai' ? '9956/dai-multi-collateral.png' :
      tokenId === 'wrapped-bitcoin' ? '7598/wrapped_bitcoin_wbtc.png' :
      '1/thumb_bitcoin.png'
    }`;
  };

  const handleSwapTokens = () => {
    setFromToken(toToken);
    setToToken(fromToken);
    setFromAmount(toAmount);
    setToAmount(fromAmount);
  };

  const handleFromAmountChange = (value: string) => {
    setFromAmount(value);
    // Calculate exchange rate based on real prices
    if (value && !isNaN(Number(value)) && tokenPrices[fromToken] && tokenPrices[toToken]) {
      const fromPrice = tokenPrices[fromToken].usd;
      const toPrice = tokenPrices[toToken].usd;
      const rate = fromPrice / toPrice;
      setToAmount((Number(value) * rate).toFixed(6));
    } else {
      setToAmount("");
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-black text-white">
      {/* Wallet Modal */}
      <WalletModal isOpen={showWalletModal} onClose={() => setShowWalletModal(false)} />
      
      <motion.header 
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className="sticky top-0 z-50 bg-black/60 border-b border-white/10 px-4 md:px-8 py-4 md:py-6 backdrop-blur-xl"
      >
        <div className="max-w-7xl mx-auto flex justify-between items-center gap-4">
          <Link href="/">
            <motion.div 
              whileHover={{ scale: 1.05 }}
              className="flex items-center gap-3"
            >
              <Image 
                src="/logo3.svg" 
                alt="no limit Logo" 
                width={240} 
                height={240}
                className="object-contain w-[120px] md:w-[180px] lg:w-[240px]"
              />
            </motion.div>
          </Link>
          
          <nav className="hidden md:flex gap-8 font-mono text-sm text-white">
            {["About", "Model", "Pricing", "Docs"].map((item, i) => (
              <motion.a
                key={item}
                href={item === "Pricing" ? "/pricing" : item === "Model" ? "/model" : item === "Docs" ? "/docs" : `/#${item.toLowerCase()}`}
                className="hover:text-[#7fff00] transition-colors bracket-text"
                whileHover={{ y: -2 }}
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: i * 0.1 }}
              >
                {item}
              </motion.a>
            ))}
          </nav>

          <button
            className="md:hidden text-white p-2"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            aria-label="Toggle menu"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              {mobileMenuOpen ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              )}
            </svg>
          </button>
          
          <div className="hidden md:flex gap-3 items-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-white/10 backdrop-blur-sm text-white px-4 py-2 md:px-6 font-mono text-xs md:text-sm font-bold hover:bg-white/20 transition-colors whitespace-nowrap border border-white/20"
            >
              Request Beta Access
            </motion.button>
            <Link href="/swap">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="bg-[#7fff00] text-black px-4 py-2 md:px-6 font-mono text-xs md:text-sm font-bold hover:bg-[#6ee600] transition-colors whitespace-nowrap"
              >
                nolimit Swap
              </motion.button>
            </Link>
          </div>
        </div>

        {mobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="md:hidden border-t border-white/10 mt-4 pt-4"
          >
            <nav className="flex flex-col gap-4 font-mono text-sm text-white">
              {["About", "Model", "Pricing", "Docs"].map((item) => (
                <a
                  key={item}
                  href={item === "Pricing" ? "/pricing" : item === "Model" ? "/model" : item === "Docs" ? "/docs" : `/#${item.toLowerCase()}`}
                  className="hover:text-[#7fff00] transition-colors bracket-text"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  {item}
                </a>
              ))}
              <button className="bg-white/10 backdrop-blur-sm text-white px-4 py-2 font-mono text-xs font-bold hover:bg-white/20 transition-colors w-full text-left border border-white/20">
                Request Beta Access
              </button>
              <Link href="/swap">
                <button className="bg-[#7fff00] text-black px-4 py-2 font-mono text-xs font-bold hover:bg-[#6ee600] transition-colors w-full text-left">
                  nolimit Swap
                </button>
              </Link>
            </nav>
          </motion.div>
        )}
      </motion.header>

      <main className="flex-1 bg-black">
        {/* Hero Section */}
        <div className="bg-gradient-to-b from-black via-[#0a0a0a] to-black border-b border-white/5">
          <div className="max-w-7xl mx-auto text-center px-4 md:px-8 py-12 md:py-16">
            <motion.div
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              <motion.div
                className="inline-block mb-4"
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.1, duration: 0.6 }}
              >
                <span className="bg-white/5 backdrop-blur-sm text-[#7fff00] px-4 py-2 font-mono text-xs md:text-sm uppercase tracking-widest border border-white/10">
                  Decentralized Exchange
                </span>
              </motion.div>

              <motion.h1 
                className="text-4xl md:text-6xl lg:text-7xl font-bold mb-4 text-white"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
              >
                <span className="font-mono bracket-text">Token Swap</span>
              </motion.h1>
              
              <motion.p 
                className="text-lg md:text-xl text-white/60 max-w-2xl mx-auto"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.4 }}
              >
                Multi-chain decentralized trading with institutional-grade execution
              </motion.p>
            </motion.div>
          </div>
        </div>

        {/* Swap Interface */}
        <div className="max-w-3xl mx-auto px-4 md:px-8 py-12 md:py-16">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, duration: 0.6 }}
            className="bg-white/5 backdrop-blur-2xl border border-white/10 shadow-2xl overflow-hidden relative rounded-3xl"
            style={{
              background: 'linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%)',
              boxShadow: '0 8px 32px 0 rgba(0, 0, 0, 0.37), inset 0 1px 1px 0 rgba(255, 255, 255, 0.1)'
            }}
          >
            {/* Settings Bar with Connect Wallet */}
            <div className="bg-white/5 backdrop-blur-xl px-6 py-4 flex flex-col md:flex-row md:items-center justify-between gap-4 border-b border-white/10">
              <h2 className="text-white font-mono text-base md:text-lg font-bold uppercase tracking-wider">Exchange Tokens</h2>
              <div className="flex items-center justify-between md:justify-end gap-4">
                <div className="flex items-center gap-3">
                  <span className="text-white/70 font-mono text-xs md:text-sm uppercase tracking-wider whitespace-nowrap">Slippage Tolerance</span>
                  <select 
                    value={slippage}
                    onChange={(e) => setSlippage(e.target.value)}
                    className="bg-black border border-white/20 text-white px-3 py-1.5 font-mono text-xs md:text-sm focus:outline-none focus:border-[#7fff00] cursor-pointer rounded-lg"
                    style={{ colorScheme: 'dark' }}
                  >
                    <option value="0.1" className="bg-black text-white">0.1%</option>
                    <option value="0.5" className="bg-black text-white">0.5%</option>
                    <option value="1.0" className="bg-black text-white">1.0%</option>
                    <option value="2.0" className="bg-black text-white">2.0%</option>
                  </select>
                </div>
                {/* Connect Wallet Button - Top Right Corner */}
                {!isConnected && !solanaAddress ? (
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleConnectWallet}
                    className="bg-[#7fff00] text-black px-5 py-2 font-mono text-xs md:text-sm font-bold hover:bg-[#6ee600] transition-colors whitespace-nowrap rounded-lg"
                  >
                    Connect Wallet
                  </motion.button>
                ) : (
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleDisconnectWallet}
                    className="bg-white/10 backdrop-blur-sm text-white px-5 py-2 font-mono text-xs md:text-sm font-bold hover:bg-white/20 transition-colors border border-white/20 whitespace-nowrap rounded-lg"
                  >
                    {displayAddress}
                  </motion.button>
                )}
              </div>
            </div>

            <div className="p-6 md:p-8 space-y-2">
              {/* From Token */}
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <label className="text-xs font-mono text-white/70 uppercase tracking-wider font-bold">You Pay</label>
                  <span className="text-xs font-mono text-white/50">
                    Balance: {tokens.find(t => t.symbol === fromToken)?.balance}
                  </span>
                </div>
                
                {/* From Chain Selector */}
                <div className="bg-white/5 backdrop-blur-sm border border-white/10 p-3 rounded-xl">
                  <label className="text-xs font-mono text-white/50 uppercase tracking-wider block mb-2">From Chain</label>
                  <div className="relative">
                    <select
                      value={fromChain}
                      onChange={(e) => setFromChain(e.target.value)}
                      className="w-full bg-black border border-white/20 text-white pl-10 pr-8 py-2 font-mono text-sm focus:outline-none focus:border-[#7fff00] cursor-pointer rounded-lg appearance-none"
                      style={{ colorScheme: 'dark' }}
                    >
                      {chains.map((chain) => (
                        <option 
                          key={chain.name} 
                          value={chain.name}
                          className="bg-black text-white"
                        >
                          {chain.name}
                        </option>
                      ))}
                    </select>
                    {/* Logo display */}
                    <div className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 pointer-events-none">
                      <Image
                        src={chains.find(c => c.name === fromChain)?.logo || '/logos/ethereum.jpg'}
                        alt={fromChain}
                        width={20}
                        height={20}
                        className="rounded-full"
                      />
                    </div>
                    {/* Dropdown arrow */}
                    <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none text-white/50">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                </div>

                <div className="bg-white/5 backdrop-blur-sm border border-white/10 p-5 md:p-6 hover:border-[#7fff00]/50 transition-colors rounded-xl">
                  <div className="flex items-center gap-4">
                    <div className="relative">
                      <select 
                        value={fromToken}
                        onChange={(e) => setFromToken(e.target.value)}
                        className="bg-black border border-white/20 text-white pl-12 pr-4 py-2.5 font-mono font-bold text-base md:text-lg focus:outline-none focus:border-[#7fff00] cursor-pointer hover:border-[#7fff00]/50 transition-colors appearance-none rounded-lg"
                        style={{ colorScheme: 'dark' }}
                      >
                        {tokens.map((token) => (
                          <option key={token.symbol} value={token.symbol} className="bg-black text-white">
                            {token.symbol}
                          </option>
                        ))}
                      </select>
                      <div className="absolute left-3 top-1/2 -translate-y-1/2 w-6 h-6 pointer-events-none">
                        <Image
                          src={getTokenLogo(tokens.find(t => t.symbol === fromToken)?.id || 'ethereum')}
                          alt={fromToken}
                          width={24}
                          height={24}
                          className="rounded-full"
                          unoptimized
                        />
                      </div>
                    </div>
                    <input
                      type="text"
                      value={fromAmount}
                      onChange={(e) => handleFromAmountChange(e.target.value)}
                      placeholder="0.00"
                      className="flex-1 bg-transparent text-right text-2xl md:text-3xl font-bold focus:outline-none font-mono text-white"
                    />
                  </div>
                  <div className="mt-2 text-right">
                    <span className="text-xs font-mono text-white/40">
                      {tokens.find(t => t.symbol === fromToken)?.name}
                    </span>
                    {tokenPrices[fromToken] && (
                      <div className="mt-1">
                        <span className="text-xs font-mono text-white/60 font-bold">
                          ${tokenPrices[fromToken].usd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </span>
                        <span className={`text-xs font-mono ml-2 ${tokenPrices[fromToken].usd_24h_change >= 0 ? 'text-[#7fff00]' : 'text-red-400'}`}>
                          {tokenPrices[fromToken].usd_24h_change >= 0 ? '▲' : '▼'}
                          {Math.abs(tokenPrices[fromToken].usd_24h_change).toFixed(2)}%
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Swap Button */}
              <div className="flex justify-center py-1 relative z-10">
                <motion.button
                  whileHover={{ scale: 1.1, rotate: 180 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={handleSwapTokens}
                  className="bg-[#7fff00] p-2.5 border-4 border-white/10 shadow-lg hover:bg-[#6ee600] transition-all duration-300 rounded-xl"
                  aria-label="Swap tokens"
                >
                  <svg className="w-5 h-5 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                  </svg>
                </motion.button>
              </div>

              {/* To Token */}
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <label className="text-xs font-mono text-white/70 uppercase tracking-wider font-bold">You Receive</label>
                  <span className="text-xs font-mono text-white/50">
                    Balance: {tokens.find(t => t.symbol === toToken)?.balance}
                  </span>
                </div>
                
                {/* To Chain Selector */}
                <div className="bg-white/5 backdrop-blur-sm border border-white/10 p-3 rounded-xl">
                  <label className="text-xs font-mono text-white/50 uppercase tracking-wider block mb-2">To Chain</label>
                  <div className="relative">
                    <select
                      value={toChain}
                      onChange={(e) => setToChain(e.target.value)}
                      className="w-full bg-black border border-white/20 text-white pl-10 pr-8 py-2 font-mono text-sm focus:outline-none focus:border-[#7fff00] cursor-pointer rounded-lg appearance-none"
                      style={{ colorScheme: 'dark' }}
                    >
                      {chains.map((chain) => (
                        <option 
                          key={chain.name} 
                          value={chain.name}
                          className="bg-black text-white"
                        >
                          {chain.name}
                        </option>
                      ))}
                    </select>
                    {/* Logo display */}
                    <div className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 pointer-events-none">
                      <Image
                        src={chains.find(c => c.name === toChain)?.logo || '/logos/ethereum.jpg'}
                        alt={toChain}
                        width={20}
                        height={20}
                        className="rounded-full"
                      />
                    </div>
                    {/* Dropdown arrow */}
                    <div className="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none text-white/50">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                  {fromChain !== toChain && (
                    <p className="text-xs font-mono text-[#7fff00] mt-2">
                      Cross-chain bridge: {fromChain} → {toChain}
                    </p>
                  )}
                </div>

                <div className="bg-white/5 backdrop-blur-sm border border-white/10 p-5 md:p-6 hover:border-[#7fff00]/50 transition-colors rounded-xl">
                  <div className="flex items-center gap-4">
                    <div className="relative">
                      <select 
                        value={toToken}
                        onChange={(e) => setToToken(e.target.value)}
                        className="bg-black border border-white/20 text-white pl-12 pr-4 py-2.5 font-mono font-bold text-base md:text-lg focus:outline-none focus:border-[#7fff00] cursor-pointer hover:border-[#7fff00]/50 transition-colors appearance-none rounded-lg"
                        style={{ colorScheme: 'dark' }}
                      >
                        {tokens.map((token) => (
                          <option key={token.symbol} value={token.symbol} className="bg-black text-white">
                            {token.symbol}
                          </option>
                        ))}
                      </select>
                      <div className="absolute left-3 top-1/2 -translate-y-1/2 w-6 h-6 pointer-events-none">
                        <Image
                          src={getTokenLogo(tokens.find(t => t.symbol === toToken)?.id || 'ethereum')}
                          alt={toToken}
                          width={24}
                          height={24}
                          className="rounded-full"
                          unoptimized
                        />
                      </div>
                    </div>
                    <input
                      type="text"
                      value={toAmount}
                      readOnly
                      placeholder="0.00"
                      className="flex-1 bg-transparent text-right text-2xl md:text-3xl font-bold focus:outline-none font-mono text-white/70"
                    />
                  </div>
                  <div className="mt-2 text-right">
                    <span className="text-xs font-mono text-white/40">
                      {tokens.find(t => t.symbol === toToken)?.name}
                    </span>
                    {tokenPrices[toToken] && (
                      <div className="mt-1">
                        <span className="text-xs font-mono text-white/60 font-bold">
                          ${tokenPrices[toToken].usd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </span>
                        <span className={`text-xs font-mono ml-2 ${tokenPrices[toToken].usd_24h_change >= 0 ? 'text-[#7fff00]' : 'text-red-400'}`}>
                          {tokenPrices[toToken].usd_24h_change >= 0 ? '▲' : '▼'}
                          {Math.abs(tokenPrices[toToken].usd_24h_change).toFixed(2)}%
                        </span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Send to Different Wallet Option */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-4 pt-4 border-t border-white/10"
              >
                <label className="flex items-center gap-3 cursor-pointer group">
                  <input
                    type="checkbox"
                    checked={sendToDifferentWallet}
                    onChange={(e) => {
                      setSendToDifferentWallet(e.target.checked);
                      if (!e.target.checked) {
                        setRecipientAddress('');
                      }
                    }}
                    className="w-5 h-5 accent-[#7fff00] cursor-pointer"
                  />
                  <span className="text-sm font-mono text-white/70 group-hover:text-white transition-colors">
                    Send to a different wallet
                  </span>
                </label>

                {sendToDifferentWallet && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="mt-3"
                  >
                    <label className="text-xs font-mono text-white/60 uppercase tracking-wider font-bold block mb-2">
                      Recipient Wallet Address
                    </label>
                    <input
                      type="text"
                      value={recipientAddress}
                      onChange={(e) => setRecipientAddress(e.target.value)}
                      placeholder="Enter wallet address (0x... or Solana address)"
                      className="w-full bg-white/5 backdrop-blur-sm border border-white/20 text-white p-4 font-mono text-sm focus:outline-none focus:border-[#7fff00] hover:border-white/30 transition-colors rounded-lg placeholder:text-white/30"
                    />
                    <p className="text-xs font-mono text-white/40 mt-2">
                      ⚠️ Double-check the address. Transactions cannot be reversed.
                    </p>
                  </motion.div>
                )}
              </motion.div>

              {/* Exchange Rate Info */}
              {fromAmount && toAmount && !pricesLoading && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white/5 backdrop-blur-sm border border-white/10 p-5 space-y-3 mt-4 rounded-xl"
                >
                  <div className="flex justify-between items-center text-sm font-mono">
                    <span className="text-white/50 uppercase tracking-wider text-xs">Exchange Rate</span>
                    <span className="font-bold text-white">1 {fromToken} = {(Number(toAmount) / Number(fromAmount)).toFixed(6)} {toToken}</span>
                  </div>
                  <div className="flex justify-between items-center text-sm font-mono border-t border-white/10 pt-3">
                    <span className="text-white/50 uppercase tracking-wider text-xs">Network Fee</span>
                    <span className="font-bold text-white">{(Number(fromAmount) * 0.003).toFixed(6)} {fromToken}</span>
                  </div>
                  <div className="flex justify-between items-center text-sm font-mono border-t border-white/10 pt-3">
                    <span className="text-white/50 uppercase tracking-wider text-xs">Max Slippage</span>
                    <span className="font-bold text-[#7fff00]">{slippage}%</span>
                  </div>
                  <div className="flex justify-between items-center text-sm font-mono border-t border-white/10 pt-3">
                    <span className="text-white/50 uppercase tracking-wider text-xs">Minimum Received</span>
                    <span className="font-bold text-[#7fff00]">{(Number(toAmount) * (1 - Number(slippage) / 100)).toFixed(6)} {toToken}</span>
                  </div>
                </motion.div>
              )}

              {/* Swap Button */}
              <motion.button
                whileHover={{ scale: (!isConnected && !solanaAddress) || (!fromAmount || !toAmount) || (sendToDifferentWallet && !recipientAddress) ? 1 : 1.02 }}
                whileTap={{ scale: (!isConnected && !solanaAddress) || (!fromAmount || !toAmount) || (sendToDifferentWallet && !recipientAddress) ? 1 : 0.98 }}
                disabled={(!isConnected && !solanaAddress) || !fromAmount || !toAmount || (sendToDifferentWallet && !recipientAddress)}
                onClick={() => {
                  if ((isConnected || solanaAddress) && fromAmount && toAmount) {
                    const destination = sendToDifferentWallet && recipientAddress 
                      ? recipientAddress 
                      : (address || solanaAddress);
                    const isCrossChain = fromChain !== toChain;
                    const swapType = isCrossChain ? 'Cross-Chain Swap & Bridge' : 'Swap';
                    alert(`${swapType} executed (demo)\n\nFrom: ${fromAmount} ${fromToken} on ${fromChain}\nTo: ${toAmount} ${toToken} on ${toChain}\nDestination: ${destination}`);
                  }
                }}
                className="w-full bg-[#7fff00] text-black py-4 md:py-5 font-mono text-base md:text-lg font-bold hover:bg-[#6ee600] hover:shadow-lg hover:shadow-[#7fff00]/20 transition-all duration-300 disabled:opacity-40 disabled:cursor-not-allowed disabled:hover:bg-[#7fff00] disabled:hover:text-black uppercase tracking-wider mt-6 rounded-xl"
              >
                {!isConnected && !solanaAddress 
                  ? "Connect Wallet to Swap" 
                  : !fromAmount || !toAmount 
                  ? "Enter Amount" 
                  : sendToDifferentWallet && !recipientAddress
                  ? "Enter Recipient Address"
                  : sendToDifferentWallet
                  ? "Swap & Send"
                  : "Execute Swap"}
              </motion.button>

              {/* Info Message */}
              {!isConnected && !solanaAddress && (
                <div className="text-center pt-4 border-t border-white/10 mt-6">
                  <p className="text-xs font-mono text-white/40 uppercase tracking-wider">
                    Connect your wallet to begin trading
                  </p>
                </div>
              )}
            </div>
          </motion.div>

          {/* Protocol Features */}
          <div className="grid md:grid-cols-3 gap-1 mt-12 border border-white/10 overflow-hidden rounded-2xl">
            {[
              {
                title: "Minimal Fees",
                desc: "Competitive 0.3% trading fee with optimized gas efficiency for cost-effective transactions",
                number: "01"
              },
              {
                title: "Instant Execution",
                desc: "High-performance routing engine delivers sub-second trade execution across multiple liquidity pools",
                number: "02"
              },
              {
                title: "Non-Custodial",
                desc: "Fully decentralized architecture ensures complete asset custody and transaction sovereignty",
                number: "03"
              }
            ].map((feature, i) => (
              <motion.div
                key={i}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6 + (i * 0.1) }}
                className="bg-white/5 backdrop-blur-sm border-r border-white/10 last:border-r-0 p-6 md:p-8 hover:bg-white/10 transition-colors group"
              >
                <div className="mb-4">
                  <span className="text-5xl md:text-6xl font-bold text-white/10 font-mono group-hover:text-[#7fff00]/20 transition-colors">
                    {feature.number}
                  </span>
                </div>
                <h3 className="font-mono font-bold text-lg md:text-xl text-white mb-3 uppercase tracking-wider">{feature.title}</h3>
                <p className="text-sm text-white/60 leading-relaxed">{feature.desc}</p>
              </motion.div>
            ))}
        </div>

        {/* Multi-Chain Support - Full Width, No Container */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.9 }}
          className="mt-20 mb-20 w-full"
        >
          <div className="grid lg:grid-cols-2 gap-0 min-h-[600px]">
            {/* Left Side - Big Text */}
            <div className="flex flex-col justify-center px-8 md:px-16 lg:px-24 py-16 bg-gradient-to-br from-white/5 to-transparent">
              <motion.h3 
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 1.0 }}
                className="text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-bold text-white mb-8 font-mono uppercase tracking-wider leading-tight"
              >
                Multi-Chain<br />Protocol
              </motion.h3>
              <motion.p 
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 1.2 }}
                className="text-white/80 text-xl md:text-2xl lg:text-3xl leading-relaxed max-w-2xl font-light"
              >
                Privacy-focused decentralized exchange enabling fully anonymous cross-chain swaps and bridges. 
                No KYC. No tracking. No data collection. Trade freely across multiple chains with complete anonymity.
              </motion.p>
            </div>

            {/* Right Side - Bigger Scrolling Carousel */}
            <div className="relative flex items-center justify-center py-16 overflow-hidden bg-gradient-to-bl from-white/5 to-transparent">
              <div className="scroll-container w-full h-full">
                <div className="scroll-content">
                  {[
                    { name: "Ethereum", logo: "/logos/ethereum.jpg" },
                    { name: "Arbitrum", logo: "/logos/arbitrum.jpg" },
                    { name: "Optimism", logo: "/logos/optimism.jpg" },
                    { name: "BSC", logo: "/logos/BSC.jpg" },
                    { name: "Avalanche", logo: "/logos/avalanche.jpg" },
                    { name: "Solana", logo: "/logos/solana.jpg" },
                    { name: "Base", logo: "/logos/base.jpg" }
                  ].map((chain, index) => (
                    <motion.div
                      key={`${chain.name}-1-${index}`}
                      initial={{ opacity: 0, x: 100 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 1.3 + (index * 0.1) }}
                      className="scroll-item bg-white/10 backdrop-blur-xl px-12 py-8 border border-white/20 hover:bg-white/20 hover:border-[#7fff00]/50 transition-all duration-300 rounded-2xl mx-4"
                    >
                      <div className="flex items-center justify-between gap-6">
                        <span className="text-white font-mono text-2xl md:text-3xl lg:text-4xl font-bold uppercase tracking-wider">
                          {chain.name}
                        </span>
                        <div className="w-16 h-16 md:w-20 md:h-20 relative flex-shrink-0 rounded-full overflow-hidden border-2 border-white/30 shadow-lg">
                          <Image
                            src={chain.logo}
                            alt={chain.name}
                            fill
                            className="object-cover"
                          />
                        </div>
                      </div>
                    </motion.div>
                  ))}
                  {/* Duplicate for seamless loop */}
                  {[
                    { name: "Ethereum", logo: "/logos/ethereum.jpg" },
                    { name: "Arbitrum", logo: "/logos/arbitrum.jpg" },
                    { name: "Optimism", logo: "/logos/optimism.jpg" },
                    { name: "BSC", logo: "/logos/BSC.jpg" },
                    { name: "Avalanche", logo: "/logos/avalanche.jpg" },
                    { name: "Solana", logo: "/logos/solana.jpg" },
                    { name: "Base", logo: "/logos/base.jpg" }
                  ].map((chain, index) => (
                    <div
                      key={`${chain.name}-2-${index}`}
                      className="scroll-item bg-white/10 backdrop-blur-xl px-12 py-8 border border-white/20 hover:bg-white/20 hover:border-[#7fff00]/50 transition-all duration-300 rounded-2xl mx-4"
                    >
                      <div className="flex items-center justify-between gap-6">
                        <span className="text-white font-mono text-2xl md:text-3xl lg:text-4xl font-bold uppercase tracking-wider">
                          {chain.name}
                        </span>
                        <div className="w-16 h-16 md:w-20 md:h-20 relative flex-shrink-0 rounded-full overflow-hidden border-2 border-white/30 shadow-lg">
                          <Image
                            src={chain.logo}
                            alt={chain.name}
                            fill
                            className="object-cover"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <style jsx>{`
            .scroll-container {
              height: 600px;
              overflow: hidden;
              position: relative;
              display: flex;
              align-items: center;
              padding: 0 2rem;
            }

            .scroll-content {
              display: flex;
              flex-direction: column;
              gap: 1.5rem;
              animation: scrollVertical 25s linear infinite;
            }

            .scroll-item {
              flex-shrink: 0;
            }

            @keyframes scrollVertical {
              0% {
                transform: translateY(0);
              }
              100% {
                transform: translateY(-50%);
              }
            }

            .scroll-container:hover .scroll-content {
              animation-play-state: paused;
            }
          `}</style>
        </motion.div>
      </main>

      <footer className="bg-black py-8 md:py-12 px-4 md:px-8 border-t border-white/10 text-white">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 md:gap-8 mb-6 md:mb-8">
            <div>
              <Link href="/">
                <div className="flex items-center gap-2 mb-4">
                  <Image 
                    src="/logo3.svg" 
                    alt="no limit Logo" 
                    width={180} 
                    height={180}
                    className="object-contain w-[120px] md:w-[150px] lg:w-[180px]"
                  />
                </div>
              </Link>
              <p className="text-sm opacity-70 leading-relaxed">
                Redefining what AI can and should be.
              </p>
            </div>
            
            {[
              {
                title: "Product",
                links: ["Model", "Pricing", "Roadmap", "Status"]
              },
              {
                title: "Developers",
                links: ["Documentation", "Setup Guide", "Quickstart", "Examples"]
              },
              {
                title: "Company",
                links: ["About", "Blog", "Contact", "Careers"]
              }
            ].map((column) => (
              <div key={column.title}>
                <h3 className="font-mono text-sm mb-4 bracket-text">
                  {column.title}
                </h3>
                <ul className="space-y-2">
                  {column.links.map((link) => (
                    <li key={link}>
                      <a 
                        href="#" 
                        className="text-sm opacity-70 hover:opacity-100 hover:text-[#7fff00] transition-colors"
                      >
                        {link}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
          
          <div className="border-t border-white/10 pt-6 md:pt-8 flex flex-col md:flex-row justify-between items-center gap-3 md:gap-4">
            <p className="text-xs md:text-sm opacity-50 font-mono text-center md:text-left">
              © 2025 no limit. All rights reserved.
            </p>
            <div className="flex gap-4 md:gap-6 text-xs md:text-sm opacity-50 flex-wrap justify-center">
              <a href="#" className="hover:opacity-100 transition-opacity">Privacy Policy</a>
              <a href="#" className="hover:opacity-100 transition-opacity">Terms of Service</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

